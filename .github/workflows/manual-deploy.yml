name: Manual Deploy to Render

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      manual_trigger:
        description: 'Confirm manual deployment trigger'
        required: true
        default: 'false'
        type: boolean
      run_tests:
        description: 'Run tests before deployment'
        required: false
        default: true
        type: boolean

jobs:
  pre-deploy-tests:
    runs-on: ubuntu-latest
    if: github.event.inputs.run_tests == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_twibase
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django

    - name: Run Django tests
      env:
        DEBUG: 0
        SECRET_KEY: 'test-secret-key-for-manual-deploy'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_twibase'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'
      run: |
        cd src/twipost
        python manage.py migrate
        python manage.py test

  manual-deploy:
    runs-on: ubuntu-latest
    needs: [pre-deploy-tests]
    if: always() && (needs.pre-deploy-tests.result == 'success' || github.event.inputs.run_tests == 'false') && github.event.inputs.manual_trigger == 'true'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Deploy Hook
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        if [ -z "$RENDER_DEPLOY_HOOK" ]; then
          echo "‚ùå Error: RENDER_DEPLOY_HOOK secret not configured"
          echo "Please add your Render deploy hook URL to GitHub secrets"
          exit 1
        fi
        echo "‚úÖ Deploy hook configured"

    - name: Deploy to Render (${{ github.event.inputs.environment }})
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        echo "üöÄ Triggering manual deployment to ${{ github.event.inputs.environment }}..."
        
        # Make the deploy hook request
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
        
        if [ "$response" -eq 200 ]; then
          echo "‚úÖ Deployment triggered successfully (HTTP $response)"
        else
          echo "‚ùå Deployment failed (HTTP $response)"
          exit 1
        fi

    - name: Post-deployment info
      run: |
        echo "üìã Deployment Summary:"
        echo "- Environment: ${{ github.event.inputs.environment }}"
        echo "- Triggered by: ${{ github.actor }}"
        echo "- Commit SHA: ${{ github.sha }}"
        echo "- Tests run: ${{ github.event.inputs.run_tests }}"
        echo ""
        echo "‚è≥ Your application is now being deployed on Render.com"
        echo "üì± Check your Render dashboard for deployment progress"

  deployment-notification:
    runs-on: ubuntu-latest
    needs: [manual-deploy]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.manual-deploy.result }}" == "success" ]; then
          echo "üéâ Manual deployment initiated successfully!"
          echo "Your Render service is now updating..."
        else
          echo "üí• Manual deployment failed!"
          echo "Please check the logs and try again."
        fi
