name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog between this tag and the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)")
        fi
        
        # Save changelog to file for multiline output
        echo "$CHANGELOG" > changelog.txt
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.txt >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## ðŸš€ Twibase Release ${{ steps.get_version.outputs.version }}
          
          ### What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ### ðŸ“¦ Docker Images
          - Development: `ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}`
          - Production: `ghcr.io/${{ github.repository }}:prod-${{ steps.get_version.outputs.version }}`
          
          ### ðŸš€ Quick Start
          ```bash
          # Using Docker Compose
          docker-compose up -d
          
          # Using specific version
          docker run -p 8000:8000 ghcr.io/${{ github.repository }}:${{ steps.get_version.outputs.version }}
          ```
          
          ### ðŸ“‹ System Requirements
          - Python 3.9+
          - Django 5.2+
          - PostgreSQL 15+ (for production)
          - Redis 7+ (optional, for caching)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, '-') }}

  build-release-images:
    runs-on: ubuntu-latest
    needs: create-release
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-${{ needs.create-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-release:
    runs-on: ubuntu-latest
    needs: [create-release, build-release-images]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying release ${{ needs.create-release.outputs.version }} to production..."
        
        # Example deployment commands (customize for your infrastructure)
        # kubectl set image deployment/twibase twibase=ghcr.io/${{ github.repository }}:prod-${{ needs.create-release.outputs.version }}
        # aws ecs update-service --cluster production --service twibase --force-new-deployment
        # docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d
        
        echo "âœ… Production deployment completed successfully!"

    - name: Notify deployment
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo;
          const version = '${{ needs.create-release.outputs.version }}';
          
          // Create a deployment status
          await github.rest.repos.createDeploymentStatus({
            owner,
            repo,
            deployment_id: context.payload.deployment?.id || 0,
            state: 'success',
            description: `Successfully deployed ${version} to production`,
            environment_url: 'https://your-production-domain.com'
          });

  notify-release:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-release]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        echo "ðŸ“¢ Release ${{ needs.create-release.outputs.version }} has been completed!"
        # Add your notification logic here (Slack, Discord, email, etc.)
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"ðŸš€ Twibase ${{ needs.create-release.outputs.version }} deployed!"}' $SLACK_WEBHOOK_URL
