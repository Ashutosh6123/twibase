name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_twibase
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov flake8 black

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with Black
      run: |
        black --check src/

    - name: Run Django tests
      env:
        DEBUG: 0
        SECRET_KEY: 'test-secret-key-for-ci'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_twibase'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'
      run: |
        cd src/twipost
        python manage.py migrate
        python manage.py test

    - name: Generate coverage report
      env:
        DEBUG: 0
        SECRET_KEY: 'test-secret-key-for-ci'
        DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/test_twibase'
        ALLOWED_HOSTS: 'localhost,127.0.0.1'
      run: |
        cd src/twipost
        pytest --cov=. --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/twipost/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        safety check -r requirements.txt
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=main-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-render:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Deploy Hook Configuration
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        if [ -z "$RENDER_DEPLOY_HOOK" ]; then
          echo "‚ö†Ô∏è Warning: RENDER_DEPLOY_HOOK not configured"
          echo "To enable automatic deployments:"
          echo "1. Go to your Render service settings"
          echo "2. Find 'Deploy Hooks' section"
          echo "3. Create a deploy hook and copy the URL"
          echo "4. Add the URL as RENDER_DEPLOY_HOOK secret in GitHub"
          echo ""
          echo "üîÑ Skipping deployment for now..."
          exit 0
        fi
        echo "‚úÖ Deploy hook configured - proceeding with deployment"

    - name: Deploy to Render.com
      env:
        RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        echo "üöÄ Deploying to Render.com..."
        echo "üìä Deployment Details:"
        echo "- Repository: ${{ github.repository }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Actor: ${{ github.actor }}"
        echo ""
        
        # Trigger deployment with error handling
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$RENDER_DEPLOY_HOOK")
        
        if [ "$response" -eq 200 ]; then
          echo "‚úÖ Render deployment triggered successfully (HTTP $response)"
          echo "üîó Check your Render dashboard for deployment progress"
        else
          echo "‚ùå Render deployment failed (HTTP $response)"
          echo "Please check your deploy hook URL and try again"
          exit 1
        fi

    - name: Deployment Status Check
      run: |
        echo "‚è≥ Deployment initiated - waiting for initial response..."
        sleep 15
        echo "üì± Your application is now being deployed on Render"
        echo "üéØ Expected deployment time: 2-5 minutes"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Monitor deployment in your Render dashboard"
        echo "2. Check application logs for any issues"
        echo "3. Test your live application once deployment completes"

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
